{
  "name": "pubsub-js",
  "version": "1.4.2",
  "description": "Dependency free publish/subscribe library",
  "main": "./src/pubsub.js",
  "directories": {
    "lib": "src",
    "test": "test"
  },
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mroderick/PubSubJS.git"
  },
  "keywords": [
    "pub/sub",
    "pubsub",
    "publish/subscribe",
    "publish",
    "subscribe"
  ],
  "author": {
    "name": "Morgan Roderick",
    "email": "morgan@roderick.dk",
    "url": "http://roderick.dk"
  },
  "license": "MIT",
  "devDependencies": {
    "buster": "0.6.x",
    "grunt": "0.4.0",
    "grunt-jslint": "0.2.5",
    "grunt-buster": "0.1.2"
  },
  "readme": "# PubSubJS\n\n[![Build Status](https://travis-ci.org/mroderick/PubSubJS.png)](https://travis-ci.org/mroderick/PubSubJS) [![NPM version](https://badge.fury.io/js/pubsub-js.png)](http://badge.fury.io/js/pubsub-js)\n\nPubSubJS is a dependency free [publish/subscribe](http://en.wikipedia.org/wiki/Publish/subscribe) library for [JavaScript](https://developer.mozilla.org/en/JavaScript).\n\nPubSubJS has synchronisation decoupling, so messages are delivered asynchronously. This helps keep your program predictable as the originator of messages will not be blocked while consumers process messages.\n\nFor the adventurous, PubSubJS also supports synchronous message publication. This can give a speedup in some environments (browsers, not all), but can also lead to some very difficult to reason about programs, when one message triggers publication of another message in the same execution chain.\n\nFor benchmarks, see [A Comparison of JS Publish/Subscribe Approaches](http://jsperf.com/pubsubjs-vs-jquery-custom-events/51)\n\n## Key features\n\n* Dependency free\n* Synchronization decoupling\n* ES3 compatible. PubSubJS should be able to run everywhere that can execute JavaScript. Browsers, servers, ebook readers, old phones, game consoles.\n* AMD / CommonJS module support\n* No modification of subscribers (jQuery custom events modify subscribers)\n* Easy to understand and use (thanks to synchronization decoupling)\n* Small(ish), less than 1kb minified and gzipped\n\n## Getting PubSubJS\n\nThere are several ways of getting PubSubJS\n\n* [Download a tagged version](https://github.com/mroderick/PubSubJS/tags) from GitHub\n* Install via npm (`npm install pubsub-js`)\n* Intall via bower (`bower install pubsub-js`)\n\n## Examples\n\n### Basic example\n\n```javascript\n// create a function to receive messages\nvar mySubscriber = function( msg, data ){\n    console.log( msg, data );\n};\n\n// add the function to the list of subscribers for a particular message\n// we're keeping the returned token, in order to be able to unsubscribe\n// from the message later on\nvar token = PubSub.subscribe( 'MY MESSAGE', mySubscriber );\n\n// publish a message asyncronously\nPubSub.publish( 'MY MESSAGE', 'hello world!' );\n\n// publish a message syncronously, which is faster in some environments,\n// but will get confusing when one message triggers new messages in the\n// same execution chain\n// USE WITH CAUTION, HERE BE DRAGONS!!!\nPubSub.publishSync( 'MY MESSAGE', 'hello world!' );\n```\n\n### Cancel specific subscripiton\n\n```javascript\n// create a function to receive the message\nvar mySubscriber = function( msg, data ){\n    console.log( msg, data );\n};\n\n// add the function to the list of subscribers to a particular message\n// we're keeping the returned token, in order to be able to unsubscribe\n// from the message later on\nvar token = PubSub.subscribe( 'MY MESSAGE', mySubscriber );\n\n// unsubscribe from further messages\nPubSub.unsubscribe( token );\n```\n\n### Cancel all subscriptions for a function\n\n```javascript\n// create a function to receive the message\nvar mySubscriber = function( msg, data ){\n    console.log( msg, data );\n};\n\n// add the function to the list of subscribers to a particular message\n// we're keeping the returned token, in order to be able to unsubscribe\n// from the message later on\nvar token = PubSub.subscribe( 'MY MESSAGE', mySubscriber );\n\n// unsubscribe mySubscriber from ALL further messages\nPubSub.unsubscribe( mySubscriber );\n```\n\n### Hierarchical addressing\n\n```javascript\n// create a subscriber to receive all messages from a hierarchy of topics\nvar myToplevelSubscriber = function( msg, data ){\n    console.log( 'top level: ', msg, data );\n}\n\n// subscribe to all topics in the 'car' hierarchy\nPubSub.subscribe( 'car', myToplevelSubscriber );\n\n// create a subscriber to receive only leaf message from hierarchy op topics\nvar mySpecificSubscriber = function( msg, data ){\n    console.log('specific: ', msg, data );\n}\n\n// subscribe only to 'car.drive' topics\nPubSub.subscribe( 'car.drive', mySpecificSubscriber );\n\n// Publish some topics\nPubSub.publish( 'car.purchase', { name : 'my new car' } );\nPubSub.publish( 'car.drive', { speed : '14' } );\nPubSub.publish( 'car.sell', { newOwner : 'someone else' } );\n\n// In this scenario, myToplevelSubscriber will be called for all\n// topics, three times in total\n// But, mySpecificSubscriber will only be called once, as it only\n// subscribes to the 'car.drive' topic\n```\n\n## Tips\n\nUse \"constants\" for topics and not string literals. PubSubJS uses strings as topics, and will happily try to deliver\nyour messages with ANY topic. So, save yourself from frustrating debugging by letting the JavaScript engine complain\nwhen you make typos.\n\n### Example of use of \"constants\"\n\n```javascript\n// BAD\nPubSub.subscribe(\"hello\", function( msg, data ){\n\tconsole.log( data )\n});\n\nPubSub.publish(\"helo\", \"world\");\n\n// BETTER\nvar MY_TOPIC = \"hello\";\nPubSub.subscribe(MY_TOPIC, function( msg, data ){\n\tconsole.log( data )\n});\n\nPubSub.publish(MY_TOPIC, \"world\");\n```\n\n### Immediate Exceptions for stack traces in developer tools\n\nAs of versions 1.3.2, you can force immediate exceptions (instead of delayed execeptions), which has the benefit of maintaining the stack trace when viewed in dev tools.\n\nThis should be considered a development only option, as PubSubJS was designed to try to deliver your topics to all subscribers, even when some fail.\n\nSetting immediate exceptions in development is easy, just tell PubSubJS about it after it's been loaded.\n\n```javascript\nPubSub.immediateExceptions = true;\n```\n\n## Plugin for jQuery\n\nBy default PubSubJS can be used in any browser or CommonJS environment, including [node](http://nodejs.org). Additionally, PubSubJS can be built specifically for jQuery.\n\n    $ rake jquery\n\nProduces jquery.pubsub.js\n\n### Use with jQuery\n\n```javascript\nvar topic = 'greeting',\n    data = 'world'\n    subscriber = function sayHello( data ){\n        console.log( 'hello ' + data );\n    };\n\n// add a subscription\nvar token = $.pubsub('subscribe', topic, subscriber );\n\n// unsubscribing\n$.pubsub('unsubscribe', token)          // remove a specific subscription\n$.pubsub('unsubscribe', subscriber);    // remove all subscriptions for subscriber\n\n// publishing a topic\n$.pubsub('publish', topic, data);\n\n// publishing topic syncronously\n$.pubsub('publishSync', topic, data);\n```\n\nIn the jQuery build, the global ```PubSub``` global is still available, so you can mix and match both ```Pubsub``` and ```$.pubsub``` as needed.\n\nThere is also an article about [Using PubSubJS with jQuery](http://roderick.dk/resources/using-pubsubjs-with-jquery/)\n\n## Contributing to PubSubJS\n\nPlease see [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## Future of PubSubJS\n\n* Build script to create the following wrappers\n\t* Ender.js wrapper\n* Better and more extensive usage examples\n\n## More about Publish/Subscribe\n\n* [The Many Faces of Publish/Subscribe](http://www.cs.ru.nl/~pieter/oss/manyfaces.pdf) (PDF)\n* [Addy Osmani's mini book on Patterns](http://addyosmani.com/resources/essentialjsdesignpatterns/book/#observerpatternjavascript)\n* [Publish / Subscribe Systems, A summary of 'The Many Faces of Publish / Subscribe'](http://downloads.ohohlfeld.com/talks/hohlfeld_schroeder-publish_subscribe_systems-dsmware_eurecom2007.pdf)\n\n## Versioning\n\nPubSubJS uses [Semantic Versioning](http://semver.org/) for predictable versioning.\n\n## Changelog\n\nPlease see [https://github.com/mroderick/PubSubJS/releases](https://github.com/mroderick/PubSubJS/releases)\n\n## License\n\nMIT: http://mrgnrdrck.mit-license.org\n\n## Alternatives\n\nThese are a few alternative projects that also implement topic based publish subscribe in JavaScript.\n\n* http://www.joezimjs.com/projects/publish-subscribe-jquery-plugin/\n* http://amplifyjs.com/api/pubsub/\n* http://radio.uxder.com/ â€” oriented towards 'channels', free of dependencies\n* https://github.com/pmelander/Subtopic - supports vanilla, underscore, jQuery and is even available in NuGet",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mroderick/PubSubJS/issues"
  },
  "homepage": "https://github.com/mroderick/PubSubJS",
  "_id": "pubsub-js@1.4.2",
  "dist": {
    "shasum": "98b083a9d447fc5ce5c062d83000631933be15bc"
  },
  "_from": "pubsub-js@",
  "_resolved": "https://registry.npmjs.org/pubsub-js/-/pubsub-js-1.4.2.tgz"
}
